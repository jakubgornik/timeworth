generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  MANAGER
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  AVAILABLE
  ASSIGNED
  ON_LEAVE
  SUSPENDED
  ARCHIVED
}

model User {
  id             String     @id // matches Supabase Auth UUID
  email          String     @unique
  name           String?
  bio            String?
  status         UserStatus @default(AVAILABLE)
  skills         String[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt()
  organizationId String?

  role          UserRole       @default(EMPLOYEE)
  workEntries   WorkEntry[]
  organization  Organization?  @relation(fields: [organizationId], references: [id])
  refreshTokens RefreshToken[]
}

model Organization {
  id         String   @id @default(cuid())
  name       String
  inviteCode String   @unique
  managerId  String   @unique
  industry   String?
  size       String?
  address    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  members     User[]
  workEntries WorkEntry[]
}

model WorkEntry {
  id          String   @id @default(cuid())
  title       String
  startedAt   DateTime
  endedAt     DateTime
  hoursWorked Float
  description String?
  hourlyRate  Float?
  billable    Boolean  @default(true)
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  userId         String
  organizationId String

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([userId, organizationId])
  @@index([startedAt, endedAt])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  revoked   Boolean  @default(false)
  expiresAt DateTime
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
