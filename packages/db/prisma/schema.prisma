generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id // it will match Supabase Auth UUID
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  refreshTokens RefreshToken[]
  memberships   Membership[]
  activities    Activity[]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  memberships Membership[]
  activities  Activity[]
}

model Membership {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()
  organizationId String
  userId         String

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  role         UserRole

  @@unique([userId, organizationId])
}

model Activity {
  id             String    @id @default(cuid())
  description    String?
  startedAt      DateTime
  endedAt        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt()
  userId         String
  organizationId String

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  itemType     ActivityType
}

enum UserRole {
  OWNER
  WORKER
}

enum ActivityType {
  WORK
  TIMEOFF
  DELEGATION
  SICK_LEAVE
  HOLIDAY
  UNPAID_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  MILITARY_LEAVE
  ONBOARDING
  TRAINING
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
